%{
#include<stdio.h>
int yylex();
void yyerror(char *msg);
void yywrap();
int regs[26];
int base=10;
extern int line;
%}

%start list
%union { int a; }


%type<a> expr number stat LETTER DIGIT


%token DIGIT LETTER

%left '|' '&'
%left '+' '-'
%left '*' '/' '%'
%left UMINUS  

%%
list:   list stat '\n'
        |
        ;

stat:   expr
        {
        printf("%d\n",$1);
        }
        |
        LETTER '=' expr
        {
        regs[$1] = $3;
        }

        ;

expr:   '(' expr ')'
        {
        $$ = $2;
        }
        |
        expr '*' expr
        {
        $$ = $1 * $3;
        }
        |
        expr '/' expr
        {
        $$ = $1 / $3;
        }
        |
        expr '%' expr
        {
        $$ = $1 % $3;
        }
        |
        expr '+' expr
        {
        $$ = $1 + $3;
        }
        |
        expr '-' expr
        {
        $$ = $1 - $3;
        }
        |
        expr '&' expr
        {
        $$ = $1 & $3;
        }
        |
        expr '|' expr
        { $$ = $1 | $3; }
        |

        '-' expr %prec UMINUS
        { $$ = -$2; }
        |
        LETTER
        { $$ = regs[$1]; }

        |
        number
        ;

number:  DIGIT
        {
        $$ = $1;
        base = ($1==0) ? 8 : 10;
        }       |
        number DIGIT
        {
        $$ = base * $1 + $2;
        }
        ;

%%

int main()
{
    yyparse();
    return 0;
}
void yyerror(char *msg)
{
    printf("\nError Message :- %s! Line number %d violates grammar rules.", msg, line);
}

void yywrap()
{
}s